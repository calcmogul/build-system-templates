EXEC := example

CC := gcc
CFLAGS_DEBUG := -O0 -g3 -Wall -std=c18
CFLAGS_RELEASE := -O2 -Wall -Wextra -Werror -pedantic -std=c18 -flto

CPP := g++
CPPFLAGS_DEBUG := -O0 -g3 -Wall -std=c++20
CPPFLAGS_RELEASE := -O2 -Wall -Wextra -Werror -pedantic -std=c++23 -flto

LD := g++
LDFLAGS :=

# Make does not offer a recursive wildcard function, so here's one:
rwildcard=$(wildcard $1$2) $(foreach dir,$(wildcard $1*),$(call rwildcard,$(dir)/,$2))

SRC_C := $(call rwildcard,src/,*.c)
SRC_CPP := $(call rwildcard,src/,*.cpp)

OBJ_C := $(SRC_C:.c=.o)
OBJ_CPP := $(SRC_CPP:.cpp=.o)

OBJ_C_DEBUG := $(addprefix build-debug/,$(OBJ_C))
OBJ_CPP_DEBUG := $(addprefix build-debug/,$(OBJ_CPP))

OBJ_C_RELEASE := $(addprefix build-release/,$(OBJ_C))
OBJ_CPP_RELEASE := $(addprefix build-release/,$(OBJ_CPP))

.PHONY: all
all: debug release

-include $(OBJ_C_DEBUG:.o=.d) $(OBJ_CPP_DEBUG:.o=.d)
-include $(OBJ_C_RELEASE:.o=.d) $(OBJ_CPP_RELEASE:.o=.d)

.PHONY: debug
debug: build-debug/$(EXEC)

build-debug/$(EXEC): $(OBJ_C_DEBUG) $(OBJ_CPP_DEBUG)
	@mkdir -p $(@D)
	$(LD) $+ $(LDFLAGS) -o $@

$(OBJ_C_DEBUG): build-debug/%.o: %.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS_DEBUG) -MMD -c -o $@ $<

$(OBJ_CPP_DEBUG): build-debug/%.o: %.cpp
	@mkdir -p $(@D)
	$(CPP) $(CPPFLAGS_DEBUG) -MMD -c -o $@ $<

.PHONY: release
release: build-release/$(EXEC)

build-release/$(EXEC): $(OBJ_C_RELEASE) $(OBJ_CPP_RELEASE)
	@mkdir -p $(@D)
	$(LD) $+ $(LDFLAGS) -o $@

$(OBJ_C_RELEASE): build-release/%.o: %.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS_RELEASE) -MMD -c -o $@ $<

$(OBJ_CPP_RELEASE): build-release/%.o: %.cpp
	@mkdir -p $(@D)
	$(CPP) $(CPPFLAGS_RELEASE) -MMD -c -o $@ $<

.PHONY: clean
clean: clean-debug clean-release

.PHONY: clean-debug
clean-debug:
	rm -rf build-debug

.PHONY: clean-release
clean-release:
	rm -rf build-release
